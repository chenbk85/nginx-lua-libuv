#user  nobody;
worker_processes  1;

# error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  logs/access.log &1;
    
    scgi_temp_path tmp/scgi_temp 1 2;
    fastcgi_temp_path tmp/fastcgi_temp 1 2;
    proxy_temp_path tmp/proxy_temp 1 2;
    uwsgi_temp_path tmp/uwsgi_temp 1 2;
    client_body_temp_path tmp/client_body_temp 1 2;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # gzip  on;
    
    lua_package_path 'app/?.lua;;';

    server {
        listen       8080;
        server_name  localhost;

        #access_log  logs/host.access.log  main;
        
        # returns an empty string
        location / {
            lua_code_cache off;
            content_by_lua_file 'app/init.lua';
        }

        location /inline_concat {
            # MIME type determined by default_type:
            default_type 'text/plain';

            set $a "hello";
            set $b "world";
            # inline Lua script
            set_by_lua $res "return ngx.arg[1]..ngx.arg[2]" $a $b;
            echo $res;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   public;
        }
    }
}
